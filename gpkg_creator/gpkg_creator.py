# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GpkgCreator
                                 A QGIS plugin
 Creates geopackages that match the requirements for the DBGI project
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Edoouard Br√ºlhart
        email                : edouard.bruelhart@unifr.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import QgsVectorLayer, QgsVectorFileWriter, QgsField, QgsProject
from qgis.PyQt.QtCore import QVariant
import os

# initialize Qt resources from file resources.py
from . import resources

def classFactory(iface):
    return GpkgCreator(iface)

class GpkgCreator:
    def __init__(self, iface):
        self.iface = iface

    def initGui(self):
        # create action that will start plugin configuration
        self.action = QAction(QIcon("resources:icon.png"),
                          "Create a DBGI geopackage",
                          self.iface.mainWindow())
        self.action.setObjectName("testAction")
        self.action.setWhatsThis("Configuration for test plugin")
        self.action.setStatusTip("This is status tip")
        self.action.triggered.connect(self.run)

        # add toolbar button and menu item
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToVectorMenu("&DBGI Geopackage Creator", self.action)

    def unload(self):
        # remove the plugin menu item and icon
        self.iface.removePluginVectorMenu("&DBGI Geopackage Creator", self.action)
        self.iface.removeToolBarIcon(self.action)

    def run(self):
    # ask user to enter the name of the GPKG
        gpkg_name, ok = QInputDialog.getText(self.iface.mainWindow(), "GPKG name", "Enter the name of the GPKG:")
        if not ok or gpkg_name == "":
            return

        # create the GPKG
        layer_name = gpkg_name
        layer_fields = [QgsField("Plant_ID", QVariant.String),
                        QgsField("spl_code", QVariant.String),
                        QgsField("Panel", QVariant.String),
                        QgsField("General", QVariant.String),
                        QgsField("Detail", QVariant.String),
                        QgsField("Cut", QVariant.String),
                        QgsField("Panel+Label", QVariant.String),
                        QgsField("x_coord", QVariant.Double),
                        QgsField("y_coord", QVariant.Double)]
        crs = self.iface.mapCanvas().mapSettings().destinationCrs().authid()
        gpkg_path = os.path.join(QgsProject.instance().homePath(), f"{gpkg_name}.gpkg")
        gpkg_layer = QgsVectorLayer(f"Point?crs={crs}&field=name:string(50)&field=value:double", layer_name, "ogr")
        gpkg_layer_provider = gpkg_layer.dataProvider()

        # add the fields to the layer
        gpkg_layer_provider.addAttributes(layer_fields)
        gpkg_layer.updateFields()

        # add the layer to the project
        QgsProject.instance().addMapLayer(gpkg_layer)